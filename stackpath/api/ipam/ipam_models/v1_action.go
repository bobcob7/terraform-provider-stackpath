// Code generated by go-swagger; DO NOT EDIT.

package ipam_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Action Which action to apply
//
// swagger:model v1Action
type V1Action string

func NewV1Action(value V1Action) *V1Action {
	v := value
	return &v
}

const (

	// V1ActionUNDEFINED captures enum value "UNDEFINED"
	V1ActionUNDEFINED V1Action = "UNDEFINED"

	// V1ActionBLOCK captures enum value "BLOCK"
	V1ActionBLOCK V1Action = "BLOCK"

	// V1ActionALLOW captures enum value "ALLOW"
	V1ActionALLOW V1Action = "ALLOW"
)

// for schema
var v1ActionEnum []interface{}

func init() {
	var res []V1Action
	if err := json.Unmarshal([]byte(`["UNDEFINED","BLOCK","ALLOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ActionEnum = append(v1ActionEnum, v)
	}
}

func (m V1Action) validateV1ActionEnum(path, location string, value V1Action) error {
	if err := validate.EnumCase(path, location, value, v1ActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 action
func (m V1Action) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 action based on context it is used
func (m V1Action) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
